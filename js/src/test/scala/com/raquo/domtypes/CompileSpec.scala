package com.raquo.domtypes

import com.thirdparty.defs.attrs.{AriaAttrs, HtmlAttrs, SvgAttrs}
import com.thirdparty.defs.eventProps.EventProps
import com.thirdparty.defs.props.Props
import com.thirdparty.defs.styles.StyleProps
import com.thirdparty.defs.styles.units.{Calc, Length, Time, Url}
import com.thirdparty.defs.tags.{HtmlTags, SvgTags}
import com.thirdparty.keys.{DerivedStyleProp, DerivedStylePropBuilder, StyleProp}
import com.thirdparty.setters.StyleSetter
import org.scalatest.funspec.AnyFunSpec
import org.scalatest.matchers.should.Matchers

class CompileSpec extends AnyFunSpec with Matchers {

  // This test suite checks the typical usage of SDT.
  // - It uses the code generated by GeneratorSpec.
  // - Everything in `com.thirdparty` is assumed to reside in the
  //   codebase of a UI library that depends on SDT at compile time
  //   (but not runtime). Most files under `com.thirdparty.defs` are
  //   generated at compile time as evidenced by the comment in their
  //   headers, whereas a few files are provided manually because it
  //   does not really make sense to generate them.
  // - Aside from the asserts below, this also implicitly tests that
  //   GeneratorSpec produced valid source code, and that the key
  //   names don't have conflicts in them.

  object html
    extends HtmlTags
    with HtmlAttrs
    with Props
    with EventProps
    with StyleProps

  object svg
    extends SvgTags
    with SvgAttrs

  object aria
    extends AriaAttrs

  type StyleEncoder[A] = A => String

  object style
    extends Url[StyleEncoder]
    with Length[StyleEncoder, Int]
    with Time[StyleEncoder]
    with Calc[StyleEncoder]
    with DerivedStylePropBuilder[StyleEncoder] {

    override protected def derivedStyle[A](encode: A => String): StyleEncoder[A] = encode
  }

  it("standard features") {

    // Simple types

    assert(html.div.domName == "div")
    assert(html.onClick.domName == "click")
    assert(html.value.domName == "value")
    assert(html.idAttr.domName == "id")
    assert(html.charset.domName == "charset")
    assert(html.display.domName == "display")

    // CSS keywords

    html.display.none: StyleSetter[_]
    val _: String = html.display.none.value
    assert(html.display.none.value == "none")

    // Derived CSS props (units)

    val _: StyleProp[String] = html.padding
    val _: DerivedStyleProp[Int] = html.padding.px
    assert((html.padding.px := 12).value == "12px")

    html.maxHeight.calc := "12px + 20em" // Length inherits Calc

    html.background.url: DerivedStyleProp[String]
    (html.background.url := "https://laminar.dev").value == """url("https://laminar.dev")"""

    assert(style.percent(55) == "55%")
    assert(style.calc("12px + 20em") == "calc(12px + 20em)")
  }
}
